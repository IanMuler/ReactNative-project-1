/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/pokemon": {
    /** Obtener lista de Pokémon */
    get: operations["getPokemonList"];
  };
  "/pokemon/{id}": {
    /** Obtener un Pokémon por ID */
    get: operations["getPokemonById"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    PokemonPaginatedResponse: {
      count?: number;
      next?: string | null;
      previous?: unknown;
      results?: components["schemas"]["Result"][];
    };
    Result: {
      name?: string;
      url?: string;
    };
    PokemonFull: {
      abilities?: components["schemas"]["Ability"][];
      base_experience?: number;
      forms?: components["schemas"]["Species"][];
      game_indices?: components["schemas"]["GameIndex"][];
      height?: number;
      held_items?: unknown[];
      id?: number;
      is_default?: boolean;
      location_area_encounters?: string;
      moves?: components["schemas"]["Move"][];
      name?: string;
      order?: number;
      past_types?: unknown[];
      species?: components["schemas"]["Species"];
      sprites?: components["schemas"]["Sprites"];
      stats?: components["schemas"]["Stat"][];
      types?: components["schemas"]["Type"][];
      weight?: number;
    };
    Ability: {
      ability?: components["schemas"]["Species"];
      is_hidden?: boolean;
      slot?: number;
    };
    Species: {
      name?: string;
      url?: string;
    };
    GameIndex: {
      game_index?: number;
      version?: components["schemas"]["Species"];
    };
    Move: {
      move?: components["schemas"]["Species"];
      version_group_details?: components["schemas"]["VersionGroupDetail"][];
    };
    VersionGroupDetail: {
      level_learned_at?: number;
      move_learn_method?: components["schemas"]["Species"];
      version_group?: components["schemas"]["Species"];
    };
    Sprites: {
      back_default?: string;
      back_female?: unknown;
      back_shiny?: string;
      back_shiny_female?: unknown;
      front_default?: string;
      front_female?: unknown;
      front_shiny?: string;
      front_shiny_female?: unknown;
      other?: components["schemas"]["Other"];
      versions?: components["schemas"]["Versions"];
      animated?: components["schemas"]["Sprites"];
    };
    Other: {
      dream_world?: components["schemas"]["DreamWorld"];
      "official-artwork"?: components["schemas"]["OfficialArtwork"];
    };
    DreamWorld: {
      front_default?: string;
      front_female?: unknown;
    };
    OfficialArtwork: {
      front_default?: string;
    };
    Versions: {
      "generation-i"?: components["schemas"]["GenerationI"];
      "generation-ii"?: components["schemas"]["GenerationIi"];
      "generation-iii"?: components["schemas"]["GenerationIii"];
      "generation-iv"?: components["schemas"]["GenerationIv"];
      "generation-v"?: components["schemas"]["GenerationV"];
      "generation-vi"?: {
        [key: string]: components["schemas"]["GenerationVi"];
      };
      "generation-vii"?: components["schemas"]["GenerationVii"];
      "generation-viii"?: components["schemas"]["GenerationViii"];
    };
    GenerationI: {
      "red-blue"?: components["schemas"]["RedBlue"];
      yellow?: components["schemas"]["RedBlue"];
    };
    RedBlue: {
      back_default?: string;
      back_gray?: string;
      front_default?: string;
      front_gray?: string;
    };
    GenerationIi: {
      crystal?: components["schemas"]["Crystal"];
      gold?: components["schemas"]["Crystal"];
      silver?: components["schemas"]["Crystal"];
    };
    Crystal: {
      back_default?: string;
      back_shiny?: string;
      front_default?: string;
      front_shiny?: string;
    };
    GenerationIii: {
      emerald?: components["schemas"]["Emerald"];
      "firered-leafgreen"?: components["schemas"]["Crystal"];
      "ruby-sapphire"?: components["schemas"]["Crystal"];
    };
    Emerald: {
      front_default?: string;
      front_shiny?: string;
    };
    GenerationVi: {
      front_default?: string;
      front_female?: unknown;
      front_shiny?: string;
      front_shiny_female?: unknown;
    };
    GenerationVii: {
      icons?: components["schemas"]["DreamWorld"];
      "ultra-sun-ultra-moon"?: components["schemas"]["GenerationVi"];
    };
    GenerationViii: {
      icons?: components["schemas"]["DreamWorld"];
    };
    GenerationIv: {
      "diamond-pearl"?: components["schemas"]["Sprites"];
      "heartgold-soulsilver"?: components["schemas"]["Sprites"];
      platinum?: components["schemas"]["Sprites"];
    };
    GenerationV: {
      "black-white"?: components["schemas"]["Sprites"];
    };
    Stat: {
      base_stat?: number;
      effort?: number;
      stat?: components["schemas"]["Species"];
    };
    Type: {
      slot?: number;
      type?: components["schemas"]["Species"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Obtener lista de Pokémon */
  getPokemonList: {
    parameters: {
      query?: {
        /** @description Número máximo de Pokémon a devolver */
        limit?: number;
        /** @description Índice de inicio para la paginación */
        offset?: number;
      };
    };
    responses: {
      /** @description Lista de Pokémon */
      200: {
        content: {
          "application/json": components["schemas"]["PokemonPaginatedResponse"];
        };
      };
    };
  };
  /** Obtener un Pokémon por ID */
  getPokemonById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Pokémon encontrado */
      200: {
        content: {
          "application/json": components["schemas"]["PokemonFull"];
        };
      };
      /** @description Pokémon no encontrado */
      404: {
        content: never;
      };
    };
  };
}
